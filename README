Here is a summary of our process and the helper functions that we created.

Features:
- time representation
- parsing intervals
- converting words to numbers
- parsing relative time expressions
- parsing holiday dates

Dependencies:

ephem==4.1.5: Used for astronomy calculations.
jewish==0.1: Used for handling Jewish dates.


Functions:

Main function:

parse_time(description): Parsing natural language descriptions of time. It converts the input description to lowercase, applies some preprocessing, and then checks for various time-related patterns using the helper functions.


Helper functions:

check_hours(text) and check_minutes(text): Checking if a given text represents an hour or a minute measure.

check_to(description) and check_past(description): Checking for expressions like "<minute> to <hour>" or "<minute> past <hour>"

parse_interval(string): Parse a string of the form "<number> <time unit> <number> <time unit> ..."

word_to_number(word): Convert a word representation of a number to a number.

check_ago(description): Check for expressions like "<number> <time unit> ago"

check_tomorrow(description) and check_in_future(description, current_time): Checking for expressions like "<day> tomorrow" or "in <time>".

convert_fractions(description): Convert common fractions like "quarter" and "half" to their numerical versions.

check_oclock(description) and check_basic_time(description): Checking for "<hour> o'clock" or a basic time expression

check_next(description) and check_last(description): Checking for expressions like "next <day>" or "last <day>" and return the corresponding date.

check_easter(description), check_ramadan(description), and check_hebrew_new_year(description): Check for specific holidays.

parse_point_time(description): Parse a description of a single datetime point and return a datetime object.

check_from_to(description), check_for(description) and check_every(description): Checking for expressions like "from <datetime1> to <datetime2>", "<datetime> for <interval>" or "<optional datetime> every <interval/datetime>"


Externam libraries installed:

ephem
jewish

Contents:

File: parse_dates.py
Contains helper function and main parse_dates function
File: testing.py
Contains test for helper and the main function.
File: .gitignore
Contains __pycache__
File: requirements.txt
Contains python packages used:
ephem==4.1.5
jewish==0.1

Sources:

Walrus operator, to call function and save return value within an if-statement
https://chat.openai.com/share/7dd6aba1-fa43-46cf-88e5-b298a96d0de0

Regular expression manual
https://docs.python.org/3/howto/regex.html

PyEphem Library to find full moon and quinoxes
https://rhodesmill.org/pyephem/quick.html

Defining the start date of Ramadan as one day after the new moon
https://en.wikipedia.org/wiki/Ramadan#Important_dates

Documentation on the jewish library (allows for easy calendar conversions and calculations)
https://github.com/emosenkis/jewish/blob/master/setup.py